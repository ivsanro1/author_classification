import pandas as pd
from nltk.tokenize import word_tokenize
from nltk.util import ngrams

# Generate
from gensim.models import LdaMulticore
from gensim import corpora
# Visualize
import pyLDAvis.gensim
import pyLDAvis
from typing import Dict

def generate_topic_models(df:pd.DataFrame, colname_text:str, num_topics:int=10, bigrams:bool=True) -> Dict:
    '''Generates topic models with the LDA algorithm given a dataframe `df`, its text column `colname_text`, a number of topics `num_topics`.
    You can set `bigrams` to `True` if you want this analysis to be done on bigrams, otherwise the analysis will be done on single words (1-grams)

    Returns:
        Dict[str, object]: A dictionary containing the the `lda_model`, the `corpus`, `id2word` index to be used in the plot function `plot_topic_models`.
    '''
    if bigrams:
        fn_tokenize = lambda txt: [' '.join(tuple_bigram) for tuple_bigram in list(ngrams(word_tokenize(txt), 2))]
    else:
        fn_tokenize = word_tokenize
    tokenized_texts = df[colname_text].apply(fn_tokenize)
    id2word = corpora.Dictionary(tokenized_texts)

    corpus = [id2word.doc2bow(text) for text in tokenized_texts]
    
    lda = LdaMulticore(corpus=corpus,
                   id2word=id2word,
                   num_topics=num_topics,
                   random_state=288,
                   iterations=200)
    return {
        'lda_model': lda,
        'corpus': corpus,
        'id2word': id2word,
        'str_topics': lda.print_topics()
    }






def plot_topic_models(d_ret_topic_modeling:Dict):
    '''
    Plots the topic models generated by `generate_topic_models`. This is intended to be used in a Jupyter Notebook like this:
    >>> d_ret_topic_modeling = generate_topic_models(df_tr_ev, colname_text='text_processed', num_topics=50, bigrams=False)
    >>> plot_topic_models(d_ret_topic_modeling)
    '''
    # Visualize the topics
    pyLDAvis.enable_notebook()

    results_LDAavis = pyLDAvis.gensim.prepare(
        d_ret_topic_modeling['lda_model'],
        d_ret_topic_modeling['corpus'],
        d_ret_topic_modeling['id2word']
    )

    return pyLDAvis.display(results_LDAavis)